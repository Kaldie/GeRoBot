# put common definitions in here
#######################################################
#################### Folders ##########################

#Directory with header files
INCLUDEFOLDER = include

#Folder with objects
OBJECTFOLDER = bin/objects

#Folder with shared libs
LIBFOLDER = bin/lib

#Folder with QT header files. Comment this if qt is not available
QTFOLDER = /../QT/5.5/gcc_64
#######################################################
################# Bash Commands #######################

# current directory
CURRENT_DIR = $(shell pwd)
# remove
RM= rm -rf

# create directory
MKDIR_P = mkdir -p

# create symbolic link
LINK = ln -fsv

# test gen
CXX = $(TOROOT)/cxxtest
CXXSRC = $(CXX)/cxxtest
TESTGEN = $(CXX)/bin/cxxtestgen

#######################################################
############ Compiling configuration ##################

#Header files
INCLUDES = -I$(TOROOT)/$(INCLUDEFOLDER)
ifdef QTFOLDER
INCLUDES := $(INCLUDES) -I$(TOROOT)$(QTFOLDER)/include
endif

unitTest : INCLUDES := $(INCLUDES) -I$(TOROOT)/$(INCLUDEFOLDER)/cxxtest

#Liberary folders
LFLAGS = -L $(TOROOT)/$(LIBFOLDER)
ifdef QTFOLDER
LFLAGS := $(LFLAGS) -L $(TOROOT)$(QTFOLDER)/lib -lQt5Core#-lQt5Gui
endif

#Macro Header
MACROHEADER = macroHeader.h
COMPILEDMACROHEADER = $(TOROOT)/$(INCLUDEFOLDER)/$(MACROHEADER).gch

#Compiler
CC = g++

#Compiler Flags
CFLAGS = -H -Wall -g -mfpmath=sse -msse -fno-inline -std=c++11 -fpic -Wfatal-errors
ifdef QTFOLDER
CFLAGS := $(CFLAGS) -DQT
endif

MAKEDEPEND : CFLAGS = $(filter-out $(CFLAGS), -o0)
#Compile shared Lib flags
CSHAREDFLAGS = -shared

#Shared lib linking flags
SHAREDLDFLAGS = -Wl,-rpath=$(TOROOT)/$(LIBFOLDER)

DEPDIR = .deps
df = $(TOROOT)/$(DEPDIR)/$(*F)
MAKEDEPEND =  g++ -MM $(filter-out -H,$(CFLAGS)) $(INCLUDES) -c $< -o $(df).d; \
	      sed -i -e '1s%^%$$(TOROOT)/$$(OBJECTFOLDER)/%' \
	      -e "s%$$(echo '$(TOROOT)' |sed 's%\([.]\)%\\\1%g')%\$$(TOROOT)%g" \
	      -e '1s%\.\.\/%% ' $(df).d;


#######################################################
################# Make Targets ########################

#Conversion from source files to object files
OBJS := $(addprefix $(TOROOT)/$(OBJECTFOLDER)/, $(SRCS:.cpp=.o))
DEPENDENCY := $(addprefix $(TOROOT)/$(OBJECTFOLDER)/, $(DEPENDENCY))

#when
unitTest: OBJS := $(foreach obj,$(notdir $(OBJS)),$(TOROOT)/$(OBJECTFOLDER)/$(obj))
DOBJS := $(addprefix $(TOROOT)/$(OBJECTFOLDER)/, $(DSRCS:.cpp=.o))


#Default target, compile all source files
all: $(OBJS)
#	@echo "Compiling all object files for this dir!"
#	@echo $(OBJS)


#Compile debug source and link it to an executable
debug: $(OBJS) $(DOBJS)
	@echo  "Creating executable for debug purposes"
	$(CC) $(CFLAGS) $(INCLUDES) $(LFLAGS) -o $(DEBUG) $(DOBJS) $(DEPENDENCY) $(LFLAGS) $(SHAREDLDFLAGS) $(LIBS)


#Create a shared lib
shared: $(OBJS) $(DEPENDENCY)
	@echo "creating shared object lib"
	$(CC) $(CFLAGS) $(INCLUDES) -shared -o $(TOROOT)/$(LIBFOLDER)/lib$(MAIN).so $(OBJS) $(DEPENDENCY) $(LFLAGS) $(SHAREDLDFLAGS) $(LIBS)	


#Clean folder of object file, libs and other bits and pieces
clean:
	$(RM) $(OBJS)
	$(RM) $(addprefix $(TOROOT)/$(LIBFOLDER)/,*$(MAIN)*)


#How to convert cpp to o files
$(TOROOT)/$(OBJECTFOLDER)/%.o : %.cpp $(COMPILEDMACROHEADER)
	@$(MAKEDEPEND)
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $(TOROOT)/$(OBJECTFOLDER)/$(notdir $@)


$(TOROOT)/$(OBJECTFOLDER)/%.d : %.cpp
	g++ -MM $(filter-out -H,$(CFLAGS)) $(INCLUDES) -c $< -o $(df).d; \
	sed -i -e '1s%^%$$(TOROOT)/$$(OBJECTFOLDER)/%' \
	-e "s%$$(echo '$(TOROOT)' |sed 's%\([.]\)%\\\1%g')%\$$(TOROOT)%g" \
	-e '1s%\.\.\/%% ' $(df).d;


$(TOROOT)/$(INCLUDEFOLDER)/%.h.gch: $(TOROOT)/%.h
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@


unitTest: $(UnitTests)
	cd ..; make; cd unit_test
	$(TESTGEN) --error-printer -o $@.cpp $(UnitTests)
	$(CC) $(CFLAGS) $(INCLUDES) $(LFLAGS) -o $@ $@.cpp $(DEPENDENCY) $(SHAREDLDFLAGS) $(LIBS)
#	./$@ $(UNIT_TEST) #> x.x

.PRECIOUS: $(COMPILEDMACROHEADER) $(TOROOT)/$(OBJECTFOLDER)/%.d

-include $(addprefix $(TOROOT)/$(DEPDIR)/, $(notdir $(SRCS:.cpp=.d)))	
